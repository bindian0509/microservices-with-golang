// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  first_name,
  last_name,
  email,
  phone,
  address
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING customer_id, first_name, last_name, email, phone, address
`

type CreateCustomerParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Email     pgtype.Text `json:"email"`
	Phone     pgtype.Text `json:"phone"`
	Address   pgtype.Text `json:"address"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE customer_id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCustomer, customerID)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT customer_id, first_name, last_name, email, phone, address FROM customers
WHERE customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, customerID uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const getCustomerForUpdate = `-- name: GetCustomerForUpdate :one
SELECT customer_id, first_name, last_name, email, phone, address FROM customers
WHERE customer_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCustomerForUpdate(ctx context.Context, customerID uuid.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerForUpdate, customerID)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT customer_id, first_name, last_name, email, phone, address FROM customers
ORDER BY customer_id
LIMIT $1
OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerEmail = `-- name: UpdateCustomerEmail :one
UPDATE customers
SET email = $2
WHERE customer_id = $1
RETURNING customer_id, first_name, last_name, email, phone, address
`

type UpdateCustomerEmailParams struct {
	CustomerID uuid.UUID   `json:"customer_id"`
	Email      pgtype.Text `json:"email"`
}

func (q *Queries) UpdateCustomerEmail(ctx context.Context, arg UpdateCustomerEmailParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerEmail, arg.CustomerID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.CustomerID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Address,
	)
	return i, err
}
